{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","console","log","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","children","this","props","style","overflow","border","height","Component","ErrorBoundry","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.051133d8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  console.log('Card');\n\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log('Cardlist');\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass Scroll extends Component {\n  render() {\n    const { children } = this.props;\n    return (\n      <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n        {children}\n      </div>\n    )\n  }\n}\n\n// const Scroll = (props) => {\n//   return (\n//     <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n//       {props.children}\n//     </div>\n//   );\n// };\n\nexport default Scroll;\n","import React, {\n  Component\n} from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    const { children } = this.props;\n    if(this.state.hasError) {\n      return <h1>This is not good...</h1>\n    }\n    return children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return { count: state.count + 1 }\n    }, () => {\n      console.log('State updated!');\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(nextProps, nextState);\n\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    console.log('Counter Button');\n    const { count } = this.state;\n    return <button color={this.props.color} onClick={this.updateCount}>Count: {count}</button>\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from '../components/CounterButton';\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    console.log('Header');\n    return (\n      <div>\n        <h1 className='f1'>RoboFriends</h1>\n        <CounterButton color={ 'blue' }/>\n      </div>\n    )\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\nimport './App.css';\n\n//importing REDUX actions:\nimport { setSearchField, requestRobots } from '../actions';\n\n// mapStateToProps receives state and returns an object with a state.reducer. as props\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField, //would be `state.searchField` if 1 reducer\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\n// mapDispatchToProps receives `dispatch` with props that it should listen to and dispatches the actions (onSearchChange - a prop); this replaces `this.setState` in App component\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  //no longer needed after REDUX:\n  // constructor() {\n  //   super()\n  //   this.state = {\n  //     robots: [],\n  //     // searchfield: ''\n  //   }\n  // }\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n    // before REDUX:\n    // // console.log(this.props.store.getState());\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    //   .then(response=> response.json())\n    //   .then(users => {this.setState({ robots: users})});\n  }\n\n  // onSearchChange = (event) => {\n  //   this.setState({ searchfield: event.target.value })\n  // }\n\n  render() {\n    // using `state` with react:\n    // const { robots } = this.state;\n    // using `state` with redux - state is passed as props right from beginning\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <Header />\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\n//connecting App component to the store:\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n// without REDUX:\n// export default App;\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants';\n\n// creating an action (JS function) `setSearchField`, that takes in `text` (user input) and returns a JS object\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\n// export const setSearchField = (text) => {\n//   console.log(text);\n//   return {\n//     type: CHANGE_SEARCH_FIELD,\n//     payload: text\n//   }\n// }\n\n// creating an action `requestRobots` that is a higher order function - returns another function; reduxThunk allows this (otherwise REDUX would expect JS object as in setSearchField action)\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=> response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n","// constant variables are used in REDUX actions to trigger error messages in case of misspelling - not necessary, good practice\n export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n// because it's a promise, robots will have three states (and 3 actions) - standard for ajax calls:\n export const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n export const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n export const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants';\n\n//creating initial state (without redux it was in the constructor of app component)\nconst initialStateSearch = {\n  searchField: ''\n}\n\n//creating reducer (JS function) 'searchRobots' with (ES6) default argument values, that `returns` a new state\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  // console.log(action.type);\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n}\n\n//creating separate initial state\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\n//creating reducer (JS function) 'requestRobots'\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { isPending: false, robots: action.payload });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { isPending: false, error: action.payload });\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'; // middleware\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\n// middleware redux-logger:\nconst logger = createLogger();\n\n//create store with rootReducer... (if there's only 1 reducer - it can be used directly)\n//const store = createStore(searchRobots);\n//... and add middleware:\nconst rootReducer= combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n// provider wraps App component and passes down the store\nReactDOM.render(\n    <Provider store={ store } >\n      <App />\n    </Provider>, document.getElementById('root'));\nregisterServiceWorker();\n\n// how it would be without redux:\n// ReactDOM.render(<App />, document.getElementById('root'));\n// registerServiceWorker();\n"],"sourceRoot":""}